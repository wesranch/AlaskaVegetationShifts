geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
facet_wrap(~Species, scales = "free_y")+
theme_bw(base_family = "Times New Roman")+
labs(y="Variable")+
theme(axis.text = element_text(color = "black", size = 14),
#axis.text.x = element_blank(),
plot.title = element_text(color = "black", size = 20),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.text = element_text(color = "black", size = 16),
legend.position = "none",
panel.grid.major = element_line(color = "gray20", linewidth = .25),
panel.grid.minor = element_blank())
importance_plot
importance_plot <- vip_df%>%
group_by(Species) %>%
slice_max(order_by = Importance, n = 7, with_ties = FALSE) %>%
mutate(Variable = factor(Variable, levels = Variable[order(Importance, decreasing = FALSE)]))%>%
#ungroup()%>%
ggplot(aes(x=Importance, y=Variable, fill=Species))+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
facet_wrap(~Species, scales = "free_y")+
theme_bw(base_family = "Times New Roman")+
labs(y="Variable")+
theme(axis.text = element_text(color = "black", size = 14),
axis.text.x = element_blank(),
plot.title = element_text(color = "black", size = 20),
axis.title.y = element_blank(),
#axis.title.x = element_blank(),
strip.text = element_text(color = "black", size = 16),
legend.position = "none",
panel.grid.major = element_line(color = "gray20", linewidth = .25),
panel.grid.minor = element_blank())
importance_plot
axis.title.x = element_text(color = "black", size = 18,
legend.position = "none",
importance_plot <- vip_df%>%
group_by(Species) %>%
slice_max(order_by = Importance, n = 7, with_ties = FALSE) %>%
mutate(Variable = factor(Variable, levels = Variable[order(Importance, decreasing = FALSE)]))%>%
#ungroup()%>%
ggplot(aes(x=Importance, y=Variable, fill=Species))+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
facet_wrap(~Species, scales = "free_y")+
theme_bw(base_family = "Times New Roman")+
labs(y="Variable")+
theme(axis.text = element_text(color = "black", size = 14),
axis.text.x = element_blank(),
plot.title = element_text(color = "black", size = 20),
axis.title.y = element_blank(),
axis.title.x = element_text(color = "black", size = 18),
strip.text = element_text(color = "black", size = 16),
legend.position = "none",
panel.grid.major = element_line(color = "gray20", linewidth = .25),
panel.grid.minor = element_blank())
importance_plot
importance_plot <- vip_df%>%
group_by(Species) %>%
slice_max(order_by = Importance, n = 7, with_ties = FALSE) %>%
mutate(Variable = factor(Variable, levels = Variable[order(Importance, decreasing = FALSE)]))%>%
#ungroup()%>%
ggplot(aes(x=Importance, y=Variable, fill=Species))+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
facet_wrap(~Species, scales = "free_y")+
theme_bw(base_family = "Times New Roman")+
labs(y="Variable")+
theme(axis.text = element_text(color = "black", size = 14),
axis.text.x = element_blank(),
plot.title = element_text(color = "black", size = 20),
axis.title.y = element_blank(),
axis.title.x = element_text(color = "black", size = 18),
strip.text = element_text(color = "black", size = 16),
legend.position = "none",
panel.grid.major = element_line(color = "gray20", linewidth = .25),
panel.grid.minor = element_blank())
importance_plot
importance_plot <- vip_df%>%
group_by(Species) %>%
slice_max(order_by = Importance, n = 7, with_ties = FALSE) %>%
mutate(Variable = factor(Variable, levels = Variable[order(Importance, decreasing = FALSE)]))%>%
#ungroup()%>%
ggplot(aes(x=Importance, y=Variable, fill=Species))+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
facet_wrap(~Species, scales = "free_y")+
theme_bw(base_family = "Times New Roman")+
labs(x="Variable importance")+
theme(axis.text = element_text(color = "black", size = 14),
axis.text.x = element_blank(),
plot.title = element_text(color = "black", size = 20),
axis.title.y = element_blank(),
axis.title.x = element_text(color = "black", size = 18),
strip.text = element_text(color = "black", size = 16),
legend.position = "none",
panel.grid.major = element_line(color = "gray20", linewidth = .25),
panel.grid.minor = element_blank())
importance_plot
library(tidytext)
importance_plot <- vip_df%>%
group_by(Species) %>%
slice_max(order_by = Importance, n = 7, with_ties = FALSE) %>%
ungroup() %>%
mutate(Variable = reorder_within(Variable, Importance, Species))%>%
# group_by(Species) %>%
# slice_max(order_by = Importance, n = 7, with_ties = FALSE) %>%
# mutate(Variable = factor(Variable, levels = Variable[order(Importance, decreasing = FALSE)]))%>%
#ungroup()%>%
ggplot(aes(x=Importance, y=Variable, fill=Species))+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_reordered()+
facet_wrap(~Species, scales = "free_y")+
theme_bw(base_family = "Times New Roman")+
labs(x="Variable importance")+
theme(axis.text = element_text(color = "black", size = 14),
axis.text.x = element_blank(),
plot.title = element_text(color = "black", size = 20),
axis.title.y = element_blank(),
axis.title.x = element_text(color = "black", size = 18),
strip.text = element_text(color = "black", size = 16),
legend.position = "none",
panel.grid.major = element_line(color = "gray20", linewidth = .25),
panel.grid.minor = element_blank())
importance_plot
importance_plot <- vip_df%>%
group_by(Species) %>%
slice_max(order_by = Importance, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(Variable = reorder_within(Variable, Importance, Species))%>%
ggplot(aes(x=Importance, y=Variable, fill=Species))+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_reordered()+
facet_wrap(~Species, scales = "free_y")+
theme_bw(base_family = "Times New Roman")+
labs(x="Variable importance")+
theme(axis.text = element_text(color = "black", size = 14),
axis.text.x = element_blank(),
plot.title = element_text(color = "black", size = 20),
axis.title.y = element_blank(),
axis.title.x = element_text(color = "black", size = 18),
strip.text = element_text(color = "black", size = 16),
legend.position = "none",
panel.grid.major = element_line(color = "gray20", linewidth = .25),
panel.grid.minor = element_blank())
importance_plot
importance_plot <- vip_df%>%
group_by(Species) %>%
slice_max(order_by = Importance, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(Variable = reorder_within(Variable, Importance, Species))%>%
ggplot(aes(x=Importance, y=Variable, fill=Species))+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_reordered()+
facet_wrap(~Species, scales = "free")+
theme_bw(base_family = "Times New Roman")+
labs(x="Variable importance")+
theme(axis.text = element_text(color = "black", size = 14),
axis.text.x = element_blank(),
plot.title = element_text(color = "black", size = 20),
axis.title.y = element_blank(),
axis.title.x = element_text(color = "black", size = 18),
strip.text = element_text(color = "black", size = 16),
legend.position = "none",
panel.grid.major = element_line(color = "gray20", linewidth = .25),
panel.grid.minor = element_blank())
importance_plot
#visualize pdp
ggplot(pdp_df, aes(x = nbr_summer, y = yhat, color = Species)) +
geom_line(size = 1) +
#facet_grid(~Species)+
scale_color_manual(values=colors)+
labs(
x = "Summer Enhanced Vegetation Index (Normalized)",
y = "Predicted Biomass (g/m²)"
) +
theme_minimal(base_family = "Times New Roman")
#visualize pdp
ggplot(pdp_df, aes(x = evi_summer, y = yhat, color = Species)) +
geom_line(size = 1) +
#facet_grid(~Species)+
scale_color_manual(values=colors)+
labs(
x = "Summer Enhanced Vegetation Index (Normalized)",
y = "Predicted Biomass (g/m²)"
) +
theme_minimal(base_family = "Times New Roman")
importance_plot
#visualize pdp
ggplot(pdp_df, aes(x = nbr_fall, y = yhat, color = Species)) +
geom_line(size = 1) +
#facet_grid(~Species)+
scale_color_manual(values=colors)+
labs(
x = "Summer Enhanced Vegetation Index (Normalized)",
y = "Predicted Biomass (g/m²)"
) +
theme_minimal(base_family = "Times New Roman")
#visualize pdp
ggplot(pdp_df, aes(x = nbr_spring, y = yhat, color = Species)) +
geom_line(size = 1) +
#facet_grid(~Species)+
scale_color_manual(values=colors)+
labs(
x = "Summer Enhanced Vegetation Index (Normalized)",
y = "Predicted Biomass (g/m²)"
) +
theme_minimal(base_family = "Times New Roman")
#visualize pdp
ggplot(pdp_df, aes(x = evi_spring, y = yhat, color = Species)) +
geom_line(size = 1) +
#facet_grid(~Species)+
scale_color_manual(values=colors)+
labs(
x = "Summer Enhanced Vegetation Index (Normalized)",
y = "Predicted Biomass (g/m²)"
) +
theme_minimal(base_family = "Times New Roman")
#visualize pdp
ggplot(pdp_df, aes(x = evi_fall, y = yhat, color = Species)) +
geom_line(size = 1) +
#facet_grid(~Species)+
scale_color_manual(values=colors)+
labs(
x = "Summer Enhanced Vegetation Index (Normalized)",
y = "Predicted Biomass (g/m²)"
) +
theme_minimal(base_family = "Times New Roman")
#visualize pdp
ggplot(pdp_df, aes(x = evi_summer, y = yhat, color = Species)) +
geom_line(size = 1) +
#facet_grid(~Species)+
scale_color_manual(values=colors)+
labs(
x = "Summer Enhanced Vegetation Index (Normalized)",
y = "Predicted Biomass (g/m²)"
) +
theme_minimal(base_family = "Times New Roman")
#visualize pdp
ggplot(pdp_df, aes(x = lat, y = yhat, color = Species)) +
geom_line(size = 1) +
#facet_grid(~Species)+
scale_color_manual(values=colors)+
labs(
x = "Summer Enhanced Vegetation Index (Normalized)",
y = "Predicted Biomass (g/m²)"
) +
theme_minimal(base_family = "Times New Roman")
#visualize pdp
ggplot(pdp_df, aes(x = lon, y = yhat, color = Species)) +
geom_line(size = 1) +
#facet_grid(~Species)+
scale_color_manual(values=colors)+
labs(
x = "Summer Enhanced Vegetation Index (Normalized)",
y = "Predicted Biomass (g/m²)"
) +
theme_minimal(base_family = "Times New Roman")
#visualize pdp
ggplot(pdp_df, aes(x = evi_summer, y = yhat, color = Species)) +
geom_line(size = 1) +
#facet_grid(~Species)+
scale_color_manual(values=colors)+
labs(
x = "Summer Enhanced Vegetation Index (Normalized)",
y = "Predicted Biomass (g/m²)"
) +
theme_minimal(base_family = "Times New Roman")
importance_plot
getwd()
png("results/graphs/variable_importance.png", width = 7, height = 6, units = "in", res = 300)
print(importance_plot)
dev.off()
#plot
validation_plot <- ggplot(main_plot_df, aes(x = Predicted, y = Observed, color = abs(Observed-Predicted))) +
geom_point(size = 6, alpha = .4, shape = 16) +
geom_smooth(method = "lm", color = "black", linetype = "solid", se = FALSE)+
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
scale_color_viridis(option = "viridis", direction=1)+
facet_wrap(~Species) +
theme_bw(base_family = "Times New Roman") +
scale_x_continuous(limits=c(0,2000))+
scale_y_continuous(limits=c(0,2000))+
labs(x = "Biomass Predicted (g/m²)",
y = "Biomass Observed (g/m²)",
color = "Difference (g/m²)") +
theme(axis.text = element_text(color = "black", size = 14),
axis.text.x = element_text(color = "black", size = 14),
plot.title = element_text(color = "black", size = 20),
axis.title.y = element_text(color = "black", size = 18),
axis.title.x = element_text(color = "black", size = 18, vjust = -.25),
strip.text = element_text(color = "black", size = 13),
legend.position = "inside",
legend.position.inside = c(0.9, 0.125),
legend.background = element_blank(),
legend.frame = element_rect(color="black"),
legend.box.background = element_rect(),
legend.key.size = unit(0.4, "cm"),
legend.title = element_text(size = 10),
legend.spacing = unit(0.2, "cm"),
legend.text = element_text(color = "black", size = 10),
panel.grid.major = element_line(color = "gray70", linewidth = .25),
panel.grid.minor = element_blank())
validation_plot
png("results/graphs/model_accuracy.png", width = 7, height = 6, units = "in", res = 300)
print(validation_plot)
dev.off()
models <- list.files("models/", full.names = TRUE)
files <- list.files("data/processed/raster/tiles/", full.names = TRUE)
files
file <- files[[1]]
file
#read in raster / convert to df
raster <- rast(file)
#read in raster / convert to df
raster <- rast(file)
raster_df <- as.data.frame(raster, xy = TRUE)
library(terra)
#read in raster / convert to df
raster <- rast(file)
raster_df <- as.data.frame(raster, xy = TRUE)
raster_df
names(raster)
full_raster
raster_df <- as.data.frame(raster, xy = TRUE)
#empty rasters to populate with actual lat lon
xrast <- rast(ncol = ncol(raster), nrow = nrow(raster), crs = crs(raster))
yrast <- rast(ncol = ncol(raster), nrow = nrow(raster), crs = crs(raster))
values(xrast) <- raster_df$x
values(yrast) <- raster_df$y
names(xrast) <- "x"
names(yrast) <- "y"
# set ext and add bands
ext(xrast) <- ext(raster)
ext(yrast) <- ext(raster)
full_raster <- c(raster, xrast, yrast)
values(xrast)
#empty rasters to populate with actual lat lon
xrast <- rast(ncol = ncol(raster), nrow = nrow(raster), crs = crs(raster))
yrast <- rast(ncol = ncol(raster), nrow = nrow(raster), crs = crs(raster))
values(xrast) <- raster_df$x
values(yrast) <- raster_df$y
names(xrast) <- "lon"
names(yrast) <- "lat"
# set ext and add bands
ext(xrast) <- ext(raster)
ext(yrast) <- ext(raster)
full_raster <- c(raster, xrast, yrast)
#modify existing fire bands to binary
full_raster <- full_raster %>%
mutate(tsf_0_5 = tsf >=0 & tsf < 5,
tsf_5_10 = tsf >=5 & tsf < 10,
tsf_10_15 = tsf >=10 & tsf < 15,
tsf_15_20 = tsf >=15 & tsf < 20)%>%
#remove these bands (not additive to models)
select(-tsf, -all_of(starts_with("severity")), -total_fires)
raster_df <- as.data.frame(raster, xy = TRUE)
#empty rasters to populate with actual lat lon
xrast <- rast(ncol = ncol(raster), nrow = nrow(raster), crs = crs(raster))
yrast <- rast(ncol = ncol(raster), nrow = nrow(raster), crs = crs(raster))
values(xrast) <- raster_df$x
values(yrast) <- raster_df$y
names(xrast) <- "lon"
names(yrast) <- "lat"
# set ext and add bands
ext(xrast) <- ext(raster)
ext(yrast) <- ext(raster)
full_raster <- c(raster, xrast, yrast)
names(full_raster)
# modify time since fire to binary
full_raster$tsf_0_5 <- full_raster$tsf >=0 & full_raster$tsf < 5
full_raster$tsf_5_10 <- full_raster$tsf >=5 & full_raster$tsf < 10
full_raster$tsf_10_15 <- full_raster$tsf >=10 & full_raster$tsf < 15
full_raster$tsf_15_20 <- full_raster$tsf >=15 & full_raster$tsf < 20
#drop some bands
layer_names <- names(full_raster)
drop_layers <- c("tsf", "total_fires", layer_names[grepl("^severity", layer_names)])
full_raster <- full_raster[[!layer_names %in% drop_layers]]
names(full_raster)
names(training_df_imputed)
model_files <- list.files("models/", full.names = TRUE)
models <- setNames(
lapply(model_files, readRDS),
tools::file_path_sans_ext(basename(model_files))
)
model <- models[[1]]
model
full_raster
raster
plot(raster$evi_spring)
plot(full_raster$evi_spring)
plot(full_raster$ndvi_summer)
model
prediction <- predict(model, full_raster)
prediction <- predict(model, as.data.frame(full_raster))
wflow
training_df_one_spp
#store and save final fit
baked_fit <- last_fit(wflow, training_df_one_spp)
formula
#tidy models recipe (swapping in entire dataset)
recipe <- recipe(formula = formula, data = training_df_one_spp) %>%
step_nzv(all_predictors()) %>%
step_corr(all_numeric_predictors(), threshold = 0.80, use = "pairwise.complete.obs", method = "pearson") %>%
step_impute_mean(all_numeric_predictors())%>%#make sure the recipe can handle NAs
step_normalize(all_numeric_predictors())
#grid search for optimal parms
model_specs <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>% set_mode("regression") %>% set_engine("randomForest", proximity = TRUE)
species <- c("black spruce", "white spruce", "resin birch", "quaking aspen")
train_model <- function(df, species, response="Biogm2") {
print(paste0("running model for: ", species))
#filter to one species
training_df_one_spp <- training_df_imputed %>% filter(Species == species)
predictors <- setdiff(names(training_df_one_spp), c("Species", "Biogm2"))#36 before screening
formula <- as.formula(paste(response, "~", paste(predictors, collapse = "+")))
#tidy models recipe (swapping in entire dataset)
recipe <- recipe(formula = formula, data = training_df_one_spp) %>%
step_nzv(all_predictors()) %>%
step_corr(all_numeric_predictors(), threshold = 0.80, use = "pairwise.complete.obs", method = "pearson") %>%
step_impute_mean(all_numeric_predictors())%>%#make sure the recipe can handle NAs
step_normalize(all_numeric_predictors())
#grid search for optimal parms
model_specs <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>% set_mode("regression") %>% set_engine("randomForest", proximity = TRUE)
grid_parms <- expand.grid(mtry = seq(5, 10, 2),
trees = seq(300,800,100),
min_n = seq(1, 12, 3))
#cross validation
nfold <- 5
print(paste0("performing cross validation across ", nfold, " folds"))
pv_folds <- vfold_cv(training_df_one_spp, v = nfold, strata = all_of(response))
#pull workflow results
tuned_results <- workflow() %>% add_recipe(recipe) %>% add_model(model_specs) %>%
tune_grid(resamples = pv_folds, grid = grid_parms, metrics = metric_set(rmse, rsq, mae))
autoplot(tuned_results)
best_params <- select_best(tuned_results, metric="rmse")
wflow <- finalize_workflow(workflow() %>% add_recipe(recipe) %>% add_model(model_specs), best_params)
#fit across the resamples
fit <- fit_resamples(wflow, resamples = pv_folds, metrics = metric_set(rmse, rsq, mae))
mean_rmse <- collect_metrics(fit) %>% filter(.metric == "rmse") %>% pull(mean)
mean_rsq <- collect_metrics(fit) %>% filter(.metric == "rsq") %>% pull(mean)
#print accuracy across resamples
print(paste("Mean RMSE across folds: ", mean_rmse))
print(paste("Mean R² across folds: ", mean_rsq))
#store and save final fit
final_fit <- fit(wflow, training_df_one_spp)
filename <- paste0("models/final_fit_", gsub(" ", "_", species), ".rds")
saveRDS(final_fit, file = filename)
print(paste("Model saved to:", filename))
return(final_fit)
}
#run the models
model_output <- lapply(species, function(spp){train_model(training_df_imputed,species=spp)})
model_files <- list.files("models/", full.names = TRUE)
models <- setNames(
lapply(model_files, readRDS),
tools::file_path_sans_ext(basename(model_files))
)
files <- list.files("data/processed/raster/tiles/", full.names = TRUE)
models
model <- models[[1]]
model
full_raster
prediction <- predict(model, as.data.frame(full_raster))
xband<-full_raster %>% select(lon)
xband<-as.data.frame(full_raster) %>% select(lon)
yband<-as.data.frame(full_raster) %>% select(lat)
prediction
View(prediction)
prediction_raster <- setValues(full_raster, prediction$.pred)
prediction_raster
names(prediction_raster)
prediction_xy
prediction_xy <- cbind(prediction, xband, yband)
prediction_xy
#convert back into SpatRaster
prediction_raster <- rast(prediction_xy, type = "xyz", crs = crs(full_raster))
template <- full_raster[[1]]
prediction_raster <- setValues(template, prediction$.pred)
prediction_raster
names(prediction_raster) <- ".pred"
prediction_raster
plot(prediction_raster)
spp
model <- models[[paste0("final_fit_", gsub(" ", "_", spp))]]
model
spp
spp_name
spp_name <- tools::toTitleCase(strsplit(spp, "_")[[1]][3])%>%
paste0(" ", strsplit(spp, "_")[[1]][4])
spp_name
i <- models[[1]]
i
names(i)
spp
pattern <- tools::toTitleCase(strsplit(spp, "_")[[1]][3])%>% strsplit(spp, "_")[[1]][4]
strsplit(spp, "_")[[1]][3]%>% strsplit(spp, "_")[[1]][4]
spp
pattern <- tools::toTitleCase(strsplit(spp, "_")[[1]][3]%>% strsplit(spp, "_")[[1]][4])
pattern <- tools::toTitleCase(strsplit(spp, "_")[[1]][3] %>% paste0(strsplit(spp, "_")[[1]][4]))
pattern
pattern <- tools::toTitleCase(strsplit(spp, "_")[[1]][3] %>% paste0(strsplit(spp, "_")[[1]][4]))
pattern <- tools::toTitleCase(strsplit(spp, "_")[[1]][3] %>% paste0(strsplit(spp, "_")[[1]][2]))
pattern
